/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreatePrimerRequest
 */
export interface CreatePrimerRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePrimerRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrimerRequest
     */
    seq: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreatePrimerRequest
     */
    aliases?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreatePrimerRequest
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePrimerRequest
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PrimerModel
 */
export interface PrimerModel {
    /**
     * 
     * @type {number}
     * @memberof PrimerModel
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PrimerModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PrimerModel
     */
    seq?: string;
    /**
     * 
     * @type {number}
     * @memberof PrimerModel
     */
    gc?: number;
    /**
     * 
     * @type {number}
     * @memberof PrimerModel
     */
    tm?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof PrimerModel
     */
    aliases?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof PrimerModel
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof PrimerModel
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Primer
         * @param {CreatePrimerRequest} createPrimerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrimerPrimerPost: async (createPrimerRequest: CreatePrimerRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrimerRequest' is not null or undefined
            assertParamExists('createPrimerPrimerPost', 'createPrimerRequest', createPrimerRequest)
            const localVarPath = `/primer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrimerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Primers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrimersPrimerAllGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/primer/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Primers
         * @param {string} [words] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPrimersPrimerSearchGet: async (words?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/primer/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (words !== undefined) {
                localVarQueryParameter['words'] = words;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Primer
         * @param {CreatePrimerRequest} createPrimerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrimerPrimerPost(createPrimerRequest: CreatePrimerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimerModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPrimerPrimerPost(createPrimerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Primers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPrimersPrimerAllGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimerModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPrimersPrimerAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Primers
         * @param {string} [words] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPrimersPrimerSearchGet(words?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimerModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPrimersPrimerSearchGet(words, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Primer
         * @param {CreatePrimerRequest} createPrimerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrimerPrimerPost(createPrimerRequest: CreatePrimerRequest, options?: any): AxiosPromise<PrimerModel> {
            return localVarFp.createPrimerPrimerPost(createPrimerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Primers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrimersPrimerAllGet(options?: any): AxiosPromise<Array<PrimerModel>> {
            return localVarFp.getAllPrimersPrimerAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: any): AxiosPromise<any> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Primers
         * @param {string} [words] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPrimersPrimerSearchGet(words?: string, options?: any): AxiosPromise<Array<PrimerModel>> {
            return localVarFp.searchPrimersPrimerSearchGet(words, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Primer
     * @param {CreatePrimerRequest} createPrimerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPrimerPrimerPost(createPrimerRequest: CreatePrimerRequest, options?: any) {
        return DefaultApiFp(this.configuration).createPrimerPrimerPost(createPrimerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Primers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllPrimersPrimerAllGet(options?: any) {
        return DefaultApiFp(this.configuration).getAllPrimersPrimerAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: any) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Primers
     * @param {string} [words] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchPrimersPrimerSearchGet(words?: string, options?: any) {
        return DefaultApiFp(this.configuration).searchPrimersPrimerSearchGet(words, options).then((request) => request(this.axios, this.basePath));
    }
}


